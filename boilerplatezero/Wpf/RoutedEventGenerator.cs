// Copyright © Ian Good

using Bpz.CodeAnalysis;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace Bpz.Wpf;

/// <summary>
/// Represents a source generator that produces idiomatic code for WPF routed events.
/// 
/// <para>Looks for things like<br/>
/// <c>public static readonly RoutedEvent FooChangedEvent = Gen.FooChanged&lt;RoutedPropertyChangedEventHandler&lt;int&gt;&gt;(RoutingStrategy.Direct);</c><br/>
/// and generates the appropriate registration code.</para>
/// </summary>
[Generator(LanguageNames.CSharp)]
public partial class RoutedEventGenerator : IIncrementalGenerator
{
	// These will be initialized before first use.
	private INamedTypeSymbol rehTypeSymbol = null!;  // System.Windows.RoutedEventHandler
	private INamedTypeSymbol rpcehTypeSymbol = null!;// System.Windows.RoutedPropertyChangedEventHandler<>
	private INamedTypeSymbol mdTypeSymbol = null!;   // System.MulticastDelegate

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		//DebugMe.Go();

		// Whether the generated code should be null-aware (i.e. the nullable annotation context is enabled).
		var enableNullable = context
			.ParseOptionsProvider
			.Select(static (po, _) => (po as CSharpParseOptions)?.LanguageVersion >= LanguageVersion.CSharp8);

		var generationRequests = context
			.SyntaxProvider
			.CreateSyntaxProvider(IsSyntaxTargetForGeneration, CreateGenerationDetails);

		var source = enableNullable
			.Combine(context.CompilationProvider)
			.Combine(generationRequests.Collect());

		context.RegisterSourceOutput(
			source,
			(spc, x) => Execute(
				useNullableContext: x.Left.Left,
				compilation: x.Left.Right,
				generationRequests: x.Right,
				context: spc));
	}

	private void Execute(bool useNullableContext, Compilation compilation, ImmutableArray<GenerationDetails> generationRequests, SourceProductionContext context)
	{
		//DebugMe.Go();

		// Get these type symbols now so we don't waste time finding them each time we need them later.
		this.rehTypeSymbol ??= compilation.GetTypeByMetadataName("System.Windows.RoutedEventHandler")!;
		this.rpcehTypeSymbol ??= compilation.GetTypeByMetadataName("System.Windows.RoutedPropertyChangedEventHandler`1")!;
		this.mdTypeSymbol ??= compilation.GetTypeByMetadataName("System.MulticastDelegate")!;

		// Cast keys to `ISymbol` in the key selector to make the analyzer shutup about CS8602 ("Dereference of a possibly null reference.").
		var namespaces = UpdateAndFilterGenerationRequests(context, compilation, generationRequests)
		   .GroupBy(g => (ISymbol)g.FieldSymbol.ContainingType, SymbolEqualityComparer.Default)
		   .GroupBy(g => (ISymbol)g.Key.ContainingNamespace, SymbolEqualityComparer.Default);

		StringBuilder sourceBuilder = new();

		foreach (var namespaceGroup in namespaces)
		{
			string namespaceName = namespaceGroup.Key.ToString();
			sourceBuilder.Append($@"
namespace {namespaceName}
{{");

			foreach (var classGroup in namespaceGroup)
			{
				string? maybeStatic = classGroup.Key.IsStatic ? "static " : null;
				string className = GeneratorOps.GetTypeName((INamedTypeSymbol)classGroup.Key);
				sourceBuilder.Append($@"
	{maybeStatic}partial class {className}
	{{");

				foreach (var generateThis in classGroup)
				{
					context.CancellationToken.ThrowIfCancellationRequested();

					this.ApppendSource(compilation, sourceBuilder, generateThis, context.CancellationToken);
				}

				sourceBuilder.Append(@"
	}
");
			}

			sourceBuilder.Append(@"
}
");
		}

		if (sourceBuilder.Length != 0)
		{
			string? maybeNullableContext = useNullableContext ? "#nullable enable" : null;

			sourceBuilder.Insert(0,
$@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a boilerplatezero (BPZ) source generator.
//     Generator = {this.GetType().FullName}
//     {Diagnostics.HelpLinkUri}
// </auto-generated>
//------------------------------------------------------------------------------
{maybeNullableContext}
using System.Windows;
");

			context.AddSource($"bpz.RoutedEvents.g.cs", sourceBuilder.ToString());
		}
	}
}
